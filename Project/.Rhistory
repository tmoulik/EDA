require(caret)
library(gdata)
setwd("Udacity/EDA(R)-Term2/Project")
require(lubridate)
require(dplyr)
#require(plyr)
require(ggplot2)
require(gridExtra) #For creating multiple plots together
library(alr3)
library(energy)
require(caret)
library(gdata)
setwd("Udacity/EDA(R)-Term2/Project")
getwd()
setwd("Udacity/EDA(R)-Term2/Project/")
setwd("Udacity/EDA(R)-Term2/Project")
knitr::opts_chunk$set(echo =FALSE, message=FALSE, warning=FALSE)
require(lubridate)
require(dplyr)
#require(plyr)
require(ggplot2)
require(gridExtra) #For creating multiple plots together
library(alr3)
library(energy)
require(caret)
library(gdata)
require(RColorBrewer)
dirname="data"
files=dir(dirname)
df_orig <- read.csv(paste(dirname,files,sep='/'))
#df_orig <- read.csv(paste(dirname,files,sep='/'),nrows=10000)
knitr::opts_chunk$set(echo =FALSE, message=FALSE, warning=FALSE)
require(lubridate)
require(dplyr)
#require(plyr)
require(ggplot2)
require(gridExtra) #For creating multiple plots together
library(alr3)
library(energy)
require(caret)
library(gdata)
require(RColorBrewer)
dirname="data"
files=dir(dirname)
df_orig <- read.csv(paste(dirname,files,sep='/'))
#df_orig <- read.csv(paste(dirname,files,sep='/'),nrows=10000)
n1=nrow(df_orig)
n2=ncol(df_orig)
#df <- df_orig[sample(1:nrow(df_orig), 5000,replace=FALSE),]
df <- df_orig
#What are the variables in the data
#I use column numbers (in no particular preference) as opposed to
#variable names at this point. This is just to have a first glimpse of
#the data. I choose and explain the variables for the analysis later.
colnames(df)[4:12]
summary(df[c(4:12)])
na_count <-sapply(df, function(y) sum(length(which(is.na(y)))))
nacount <- as.data.frame(na_count)
nacount <- cbind(rownames(nacount), nacount)
rownames(nacount) <- NULL
colnames(nacount)[1] <- "Variable"
nacount <- nacount[order(na_count),]
nacount
df$ListCreationYear <- format(as.Date(df$ListingCreationDate),"%Y")
df$LoanCreationYear <- format(as.Date(df$LoanOriginationDate),"%Y")
df$CreditPullYear <- format(as.Date(df$DateCreditPulled),"%Y")
df$FirstRecordedCreditYear <- format(as.Date(df$FirstRecordedCreditLine),"%Y")
p1<- qplot(df$ListCreationYear,df$LoanCreationYear)
p2 <- qplot(df$CreditPullYear,df$LoanCreationYear)
grid.arrange(p1,p2,nrow=2)
qplot(data=df,x=LoanCreationYear)+geom_bar()
p1 <- qplot(data=df,x=LoanCreationYear,y=BorrowerRate)+geom_boxplot()
p2 <- qplot(data=df,x=LoanCreationYear)+geom_bar()
grid.arrange(p1,p2,nrow=2)
tail(sort(unique(df[df$LoanCreationYear=="2013","LoanOriginationDate"])))
tail(sort(unique(df[df$LoanCreationYear=="2014","LoanOriginationDate"])))
p1 <- qplot(data=subset(df,CreditGrade=="A"),x=LoanCreationYear,y=BorrowerRate)+
geom_boxplot()
p2 <- qplot(data=subset(df,CreditGrade=="A"),x=LoanCreationYear)+geom_bar()
grid.arrange(p1,p2,nrow=2)
#Lets Facet wrap this plot with Credit Grade.
#qplot(data=df,x=LoanCreationYear,y=BorrowerRate)+geom_boxplot()+facet_wrap(~CreditGrade)+
#  theme(axis.text.x=element_text(angle=60,vjust=0.8))
ggplot(df,aes(x=LoanCreationYear,y=BorrowerAPR))+geom_boxplot(aes(fill=CreditGrade))+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
"Lets investigate LoanStatus for the available Credit Grades"
dfcg <- subset(df,CreditGrade %in% c("AA","A","B","C","D","E"))
ggplot(dfcg,aes(x=CreditGrade))+geom_bar(aes(fill=LoanCreationYear),position="dodge")+
ggtitle("Frequency dist. of CreditGrade")+
theme(plot.title = element_text(hjust = 0.5))
p <- ggplot(dfcg,aes(x = LoanStatus))
p + geom_bar(position = "dodge",aes(fill = LoanCreationYear,
y = (..count..)/sum(..count..)))+
ggtitle("Density for LoanStatus for Different Years")+
scale_fill_brewer(palette="Spectral")+
theme(plot.title = element_text(hjust = 0.5))
p + geom_bar(aes(y =..prop..,group = LoanCreationYear,fill = LoanCreationYear),
position = "dodge") + scale_fill_brewer(palette="Spectral")
mytab <- as.data.frame(table(dfcg$LoanStatus))
mytab <- mytab[mytab$Freq>0,]
mytab$Var1 <- factor(mytab$Var1)
slices <- mytab[,2]
lbls <- mytab[,1]
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of LoanStatus",radius=1.0)
"The proportions can be seen here :"
lbls
p <- ggplot(df,aes(x=LoanStatus))
p + geom_bar() + theme(axis.text.x=element_text(angle=80,vjust=0.5))
qplot(subset(df,LoanCurrentDaysDelinquent!=0)$LoanCurrentDaysDelinquent)+
ggtitle("Non-zero Delinquent days(All data)")+xlab("Delinquent Days")+
theme(plot.title = element_text(size = 10))
'Notice the two strange peaks. Lets look into this further'
'Plot Delinqent days for the entire dataset vs only those prior to 2008 and
facet it with LoanStatus'
df$LoanStatus <- gsub("Past Due","PD",df$LoanStatus)
df$LoanStatus <- gsub("days","d",df$LoanStatus)
sd <- subset(df,LoanCurrentDaysDelinquent!=0)
sd1 <- subset(dfcg,LoanCurrentDaysDelinquent!=0)
#ggplot(data=sd1,aes(x=LoanCurrentDaysDelinquent))+
#  facet_wrap(~LoanStatus, ncol=4)+geom_histogram()+xlim(c(0.0,2000))+
#  ggtitle('Prior to 2008')
#Resubmission
ggplot(data=sd1,aes(x=LoanCurrentDaysDelinquent))+
geom_histogram(aes(fill=LoanStatus))+coord_cartesian(xlim=c(0.0,4000))+
ggtitle("Before 2009")+
scale_fill_brewer(palette="Accent")+theme(legend.text=element_text(size=8))
sd2 <- subset(sd,CreditGrade=="")
#ggplot(data=sd2,aes(x=LoanCurrentDaysDelinquent))+geom_histogram()+
# facet_wrap(~LoanStatus)
#  xlim(c(0.0,2000))+ggtitle("After 2009 for data with no CreditGrades")
#Resubmissoin
ggplot(data=sd2,aes(x=LoanCurrentDaysDelinquent))+
geom_histogram(aes(fill=LoanStatus),colour="white")+
xlim(c(0.0,2000))+ggtitle("After 2009")+
scale_fill_brewer(palette="Accent")+theme(legend.text=element_text(size=8))
#The following have really small number of events so they dont show up in the
#facet_wrap'
p1 <- qplot(df[df$LoanStatus=="PD (1-15 d)",
"LoanCurrentDaysDelinquent"])+xlab("PD(1-15 d)")
p2 <- qplot(df[df$LoanStatus=="PD (16-30 d)",
"LoanCurrentDaysDelinquent"])+xlab("PD(16-30 d)")
grid.arrange(p1,p2,ncol=2)
mytab <- as.data.frame(table(df$LoanStatus))
drows <- grep("PD",mytab[,1])
nsave <- sum(mytab[c(drows),2]) #Add all Delinquent Accounts
mytab1 <- mytab[-c(drows),] #Remove old columns of PastDue and Cancelled accounts
rownames(mytab1) <- NULL #Reset Row Numbers or you get the old row numbers
mytab1$Var1 <- factor(mytab1$Var1)
mytab1$Var1 <- as.character(mytab1$Var1) #Convert to character
mytab1$Var1
mytab1$Var1[6] <- "FPI" # Change long name to short
mytab1[7,] <- c("Delinquent",nsave)
#Pie Chart of LoanStatus
slices <- as.numeric(mytab1[,2])
lbls <- mytab1[,1]
pct <- round(slices/sum(slices)*100)
alllbls <- lbls
#Get the non-zero proportions only :
ipct <- which(pct!=0)
newpct <- pct[c(ipct)]
newlbls <- lbls[c(ipct)]
slices <- slices[c(ipct)]
lbls <- paste(newlbls, newpct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # add % to labels
pie(slices,labels = lbls,
main="Pie Chart of LoanStatus",radius=0.9,col=terrain.colors(length(lbls)))
"Pie chart proportions :"
alllbls
#make new values and put all the PastDue Accounts > 61 days as "Delinquent"
#and others in "Goodstanding" as below
df$NewLoanStatus <- as.character(df$LoanStatus)
dfs <- subset(df,!is.na(BorrowerAPR))
dfs$NewLoanStatus[(dfs$LoanStatus == "Cancelled" |
dfs$LoanStatus == "Defaulted" |
dfs$LoanStatus == "PD (31-60 d)" |
dfs$LoanStatus == "PD (61-90 d)" |
dfs$LoanStatus == "PD (91-120 d)" |
dfs$LoanStatus == "PD (>120 d)")] <- "Delinquent"
dfs$NewLoanStatus[(dfs$LoanStatus == "Current" |
dfs$LoanStatus == "PD (1-15 d)" |
dfs$LoanStatus == "PD (16-30 d)")] <- "InGoodStanding"
'Delinquent Loans are most likely to Default or have to be chargedoff.'
'Create a new dataframe dfs and transform the LoanStatus into these two new variables'
dfs$NewLoanStatus <- gsub("FinalPaymentInProgress","FPI",dfs$NewLoanStatus)
ggplot(dfs,aes(x=LoanOriginalAmount))+geom_density(aes(fill=NewLoanStatus),alpha=0.5)+
facet_wrap(~NewLoanStatus)+theme(axis.text.x=element_text(angle=70,vjust=0.7))
cloangood <- c("InGoodStanding","Completed","FPI")
#Also combine the Charged off and Delinquent into "BadLoan"
cloanbad <- c("Chargedoff","Delinquent")
dfs$NewLoanStatus2[dfs$NewLoanStatus %in% cloangood] <- "GoodLoan"
dfs$NewLoanStatus2[dfs$NewLoanStatus %in% cloanbad] <- "BadLoan"
ggplot(dfs,aes(x=LoanOriginalAmount))+geom_density(aes(fill=NewLoanStatus2),
alpha=0.5)+facet_wrap(~NewLoanStatus2)
dfs$MeanCreditScore <- (dfs$CreditScoreRangeLower+dfs$CreditScoreRangeUpper)/2.0
#Plot of BorrowerAPR vs CreditGrade
ggplot(dfs,aes(x=CreditGrade,y=BorrowerAPR))+
geom_boxplot(aes(fill=LoanCreationYear))
ggplot(dfs,aes(y=CreditScoreRangeLower,x=CreditGrade))+geom_boxplot()+
coord_cartesian(ylim=c(400,900))+
scale_y_continuous(breaks=seq(400,900,40))
#Lets get the maximum and minimum of each CreditGrade
dfcg_1 <- subset(dfs,!is.na(CreditScoreRangeLower))
grades <- sort(unique(dfcg_1$CreditGrade))
grades
mins <- length(grades)
maxs <- length(grades)
for ( i in 1:length(grades)) {
mins[i] <- min(dfcg_1$CreditScoreRangeLower[dfcg_1$CreditGrade==grades[i]])
maxs[i] <- max(dfcg_1$CreditScoreRangeLower[dfcg_1$CreditGrade==grades[i]])
}
'These are the grades and their corresponding credit score ranges:'
data.frame(grades,mins,maxs)
dfs_0 <- subset(dfs,!is.na(MeanCreditScore))
dfs$NewCreditGrade <- dfs$CreditGrade
var <- unique(dfs_0$CreditGrade)
var <- sort(var)
var
for (i in 2:length(var)) {
n1=min(unique(dfs_0$MeanCreditScore[dfs_0$CreditGrade==var[i]]))
n2=max(unique(dfs_0$MeanCreditScore[dfs_0$CreditGrade==var[i]]))
dfs$NewCreditGrade[dfs$NewCreditGrade==""
& dfs$MeanCreditScore>=n1
& dfs$MeanCreditScore<=n2] <- var[i]
}
ggplot(dfs,aes(x=NewCreditGrade,y=BorrowerAPR))+geom_boxplot(aes(fill=LoanCreationYear))+
theme(legend.title=element_text(size=11.2),legend.text = element_text(size=8.2))
dfs_1 <- subset(dfs,!is.na(OpenCreditLines))
#Plot the upper and lower CreditScore Ranges vs the newCreditGrade, just
#to visualize the relationship between the two
#Get a Palette
pal <- palette(rainbow(9))
ggplot(dfs_1,aes(x=CreditScoreRangeLower))+
geom_bar(aes(fill=NewCreditGrade),alpha=0.5)+
scale_x_continuous(breaks=seq(500,900,20))+
scale_fill_manual(values=pal)+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
ggplot(data = dfs, aes(x = BorrowerAPR)) +
geom_histogram(binwidth = 0.01,aes(x=BorrowerAPR,y=..density..),fill=2) +
scale_x_continuous(breaks=seq(0.0,0.5,0.05)) +
facet_wrap(~NewCreditGrade,ncol=3)+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
"Lets plot the Means and Standard Deviation vs Credit Grade"
gp1 <- group_by(dfs,NewCreditGrade)
#I specifically call dplyr::summarise as it conflicts with plyr, which I also use
dfgp1 <- dplyr::summarise(gp1,apr_med = median(BorrowerAPR),
apr_mean=mean(BorrowerAPR),apr_sd=sd(BorrowerAPR),n=n())
#Plot the mean APR and error on Mean vs NewCreditGrade
ggplot(data = dfgp1, aes(x=NewCreditGrade,y=apr_mean)) + geom_point()+
geom_errorbar(aes(ymin =apr_mean-(apr_sd/sqrt(n-1)), ymax = apr_mean+
(apr_sd/sqrt(n-1))))
'BorrowerAPR vs CreditScoreRangeLower'
ggplot(dfs, aes(CreditScoreRangeLower,BorrowerAPR)) +
geom_point(color="red",alpha=1/30,position = position_jitter(h=0.1,w=0.1))+
geom_line(stat='summary',fun.y=mean, color="blue",size=1) +xlim(300.0,1000.0)
gp_scr <- group_by(dfs,CreditScoreRangeLower)
dfnew <- dplyr::summarise(gp_scr,apr_mean=mean(BorrowerAPR),
apr_sd=sd(BorrowerAPR),n=n())
#Plot the mean APR and error on Mean vs CreditScoreRangeLower - Plot2 b
plot1b <- ggplot(data = dfnew, aes(x=CreditScoreRangeLower,y=apr_mean))
plot1b + geom_point() + xlim(250.0,1000.0) + geom_smooth() +
geom_errorbar(aes(ymin =apr_mean-(apr_sd/sqrt(n-1)),ymax = apr_mean+
(apr_sd/sqrt(n-1))))
#Reference for this function : Get the most highly correlated variables
#http://little-book-of-r-for-multivariate-analysis.readthedocs.io/en/+latest/src/multivariateanalysis.html
#I added two more lines to remove the diagonal elements, which are input as 0,
#to avoid showing them
mosthighlycorrelated <- function(mydataframe,numtoreport)
{
# find the correlations
cormatrix <- cor(mydataframe)
# set the correlations on the diagonal or lower triangle to zero,
# so they will not be reported as the highest ones:
diag(cormatrix) <- 0
cormatrix[lower.tri(cormatrix)] <- 0
# flatten the matrix into a dataframe for easy sorting
fm <- as.data.frame(as.table(cormatrix))
# assign human-friendly names
names(fm) <- c("First.Variable", "Second.Variable","Correlation")
fm$Correlation[fm$Correlation==0] <- NA
fm <- na.omit(fm)
# sort and print the top n correlations
head(fm[order(abs(fm$Correlation),decreasing=T),],n=numtoreport)
}
#Lets choose some variables and study their correlations:
vars <- c("TotalCreditLinespast7years","InquiriesLast6Months",
"CurrentDelinquencies","PublicRecordsLast10Years","MeanCreditScore")
#Some people who have creditscores may not have these so we remove them first.
temp <- na.omit(dfs[,vars])
mosthighlycorrelated(temp,16)
vars <- c("DelinquenciesLast7Years","TotalInquiries","AvailableBankcardCredit",
"TotalTrades","TradesOpenedLast6Months","CurrentCreditLines",
"OpenCreditLines","PublicRecordsLast12Months","RevolvingCreditBalance",
"BankcardUtilization","EmploymentStatusDuration","AmountDelinquent",
"MeanCreditScore")
temp <- na.omit(dfs[,vars])
mosthighlycorrelated(temp,10)
vars <- c("RevolvingCreditBalance","MeanCreditScore")
temp <- na.omit(dfs[,vars])
cor(temp)
vars <- c("DebtToIncomeRatio","MeanCreditScore")
temp <- na.omit(dfs[,vars])
cor(temp)
temp <- subset(dfs,CurrentDelinquencies>0)
ggplot(temp,aes(x=CurrentDelinquencies,fill=NewCreditGrade))+
geom_density(alpha=1/5)+xlim(0.0,10.0)
var <- "AvailableBankcardCredit"
var2 <- "NewCreditGrade"
temp <- dfs
#Since there is a big spike at 0, lets look at just the non-zero values:
temp <- subset(dfs,var>0)
ggplot(temp,aes_string(x=var,fill=var2))+geom_histogram(alpha=1/2)+
scale_y_log10()
#Transforming to log variables to view separation better
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()
#To view this better lets just look at two credit Grades : AA and D
#temp$NewCreditGrade <- as.character(temp$NewCreditGrade)
#temp <- subset(temp,NewCreditGrade %in% c("A","C","HR"))
#Convert to %age before using geom_density because the values are in fractions
temp$BankcardUtilization = temp$BankcardUtilization*100
ggplot(temp,aes(x=BankcardUtilization,fill=NewCreditGrade))+
geom_density(alpha=1/5)+xlim(0.0,200.0)
#How do number of Open Credit lines affect Credit Grade and CreditScore - Plot1.
#Box plot shows a large number of outliers for the credit grade. The mean scores
#are fairly close. Lets group and plot some stats.
dfs_1 <- subset(dfs,!is.na(OpenCreditLines))
ggplot(dfs_1,aes(x=CreditGrade,y=OpenCreditLines))+geom_boxplot()
#Lets group by CreditScoreRangeLower
gp1 <- dfs_1 %>% group_by(CreditScoreRangeLower)
gp1 <- gp1 %>% dplyr::summarise(crsmean = mean(OpenCreditLines),
crsmed = median(OpenCreditLines),nc=n())
gp1 <- arrange(gp1,CreditScoreRangeLower)
ggplot(dfs_1,aes(x=CreditScoreRangeLower,y=OpenCreditLines)) +
geom_count(alpha=1/4,color='red')+
geom_line(stat='summary',fun.y=mean,color='blue',size=1.0)+
geom_line(stat='summary',fun.y=quantile, fun.args=list(probs=0.1),
linetype=2,color='blue',size=1.)+
geom_line(stat='summary',fun.y=quantile, fun.args=list(probs=0.9),
linetype=2,color='blue',size=1.)+
geom_line(stat='summary',fun.y=quantile, fun.args=list(probs=0.5),
color='red',size=1.)+
scale_x_continuous(breaks = seq(500,900,20),limits=c(500,900))+
scale_y_continuous(limits=c(0,20),breaks=seq(0,20,2))+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
#How does the CreditScore vary with EmploymentStatus
var <- c("EmploymentStatus","CreditScoreRangeLower","CreditScoreRangeUpper")
'Plot 6'
ggplot(dfs,aes_string(x=var[1])) + geom_bar(aes(y = (..count..)/sum(..count..)))+
theme(axis.text.x=element_text(angle=60,vjust=0.6))
#Most are employed about 60%. One of the categories is blank and not available
ggplot(dfs,aes_string(x=var[1])) +
geom_boxplot(aes_string(y=var[2]),fill=4,alpha=0.5,color=4)+
geom_boxplot(aes_string(y=var[3]),fill=2,alpha=0.5,color=2)+
scale_y_continuous(limits = c(500,950))+
theme(axis.text.x=element_text(angle=60,vjust=0.6))
#ggplot(data=dfs,aes(x=DebtToIncomeRatio))+
#  geom_density(alpha=0.5,aes(fill=NewCreditGrade))+scale_x_continuous(limits=c(0.0,1.0))+
#  facet_wrap(~NewCreditGrade)
#Convert to % so that density is from 0-1
dfs$DToIPercent <- dfs$DebtToIncomeRatio*100
dfs$DToIPercent <- dfs$DebtToIncomeRatio
ggplot(data=dfs,aes(x=DToIPercent))+
geom_density(alpha=0.5,aes(fill=NewCreditGrade))+xlim(0.0,100.0)
ggplot(data=dfs,aes(x=NewCreditGrade,y=DToIPercent))+
geom_boxplot(aes(fill=NewLoanStatus))+coord_cartesian(ylim=c(0.0,50))
ggplot(dfs,aes(x=NewCreditGrade,y=DToIPercent))+
geom_boxplot(aes(fill=IsBorrowerHomeowner))+ylim(0.0,50)
#ggplot(data=dfs,aes(x=NewCreditGrade,y=DToIPercent))+
#  geom_boxplot()+coord_cartesian(ylim=c(0.0,0.5))+facet_wrap(~LoanStatus, ncol=4)
dfsa <- subset(dfs,!is.na(MeanCreditScore) & !is.na(OpenCreditLines))
ggplot(dfsa,aes(x=MeanCreditScore,y=DToIPercent))+
geom_count(aes(color=MeanCreditScore))+facet_wrap(~EmploymentStatus, ncol=4)+
ylim(0.0,100.0)+theme(axis.text.x=element_text(angle=60,vjust=0.8))
#This shows that if you are a Homeowner you are allowed slightly higher
#DToIPercent
"These are the income ranges"
unique(df$IncomeRange)
"Here, I map the Income Categories to Income Levels. I wanted to arrange
it such that 100,000+ is the last category so I created my own levels.
Map these ranges from 1-8"
fac <- factor(c("Not displayed","Not employed","$0","$1-24,999","$25,000-49,999",
"$50,000-74,999","$75,000-99,999","$100,000+"))
dfs$IncomeLevel <- as.character(dfs$IncomeRange)
require(plyr)
dfs$IncomeLevel <- plyr::mapvalues(dfs$IncomeLevel,fac,mapLevels(fac))
#This creates a list so unlist it
dfs$IncomeLevel <- unlist(dfs$IncomeLevel)
dfsa <- subset(dfs,MeanCreditScore>100)
dfsa$IncomeLevel <- as.character(dfsa$IncomeLevel)
#ggplot(data=dfsa,aes(x=IncomeLevel,y=BorrowerAPR))+geom_count(alpha=1/10, color="red")
ggplot(data=dfsa,aes(x=IncomeLevel,y=BorrowerAPR))+
geom_violin(alpha=0.3,fill="red")
p1 <- ggplot(data=dfsa,aes(x=IncomeLevel,y=BorrowerAPR))+
geom_boxplot(aes(fill=IsBorrowerHomeowner))
p2 <- ggplot(data=dfsa,aes(x=IncomeLevel,y=MeanCreditScore))+
geom_boxplot(aes(fill=IsBorrowerHomeowner))
grid.arrange(p1,p2,nrow=2)
ggplot(dfs,aes(x=dfs$NewCreditGrade,y=dfs$IncomeLevel))+
geom_count()+ylim(2.0,8.0)
colnames(dfs)[grep("TradesNever",colnames(dfs))] <- "TradesNeverDQP"
dfs1 <- subset(dfs,NewCreditGrade=="A" | NewCreditGrade=="D" |
NewCreditGrade=="E")
d <- ggplot(dfs1,aes(x=TotalTrades,y=TradesNeverDQP))
d+geom_density_2d(aes(color=NewCreditGrade))+
stat_density_2d(aes(fill=..level..),geom="polygon",alpha=1/5)+
facet_wrap(~NewCreditGrade)+coord_cartesian(xlim=c(0,50))+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
d+geom_density_2d(aes(color=NewCreditGrade))+
stat_density_2d(geom="point",aes(size = ..density..),contour=FALSE,
alpha=1/10,n=20)+
facet_wrap(~NewCreditGrade)+coord_cartesian(xlim=c(0,50))+
theme(axis.text.x=element_text(angle=60,vjust=0.8))
ggplot(dfs1,aes(x=TradesNeverDQP))+
geom_histogram(alpha=1/2,binwidth = 0.08,aes(color=NewCreditGrade,
fill=NewCreditGrade,y=..count../sum(..count..)))+
scale_x_continuous(breaks=seq(0.2,1.0,0.2),limits=c(0.2,1.0))
ggplot(dfs1,aes(x=TotalTrades))+
geom_histogram(alpha=1/2,binwidth =2,aes(color=NewCreditGrade,
fill=NewCreditGrade,y=..count../sum(..count..)))+
scale_x_continuous(breaks=seq(0,50,10),limits=c(0.0,50.0))
v1 <- "RevolvingCreditBalance"
v2 <- "PublicRecordsLast12Months"
p <- ggplot(dfs1,aes_string(x=v2))
k1 <- p +geom_bar(aes(y=..prop..,color=NewCreditGrade,fill=NewCreditGrade),
alpha=1/5,position="dodge")
dfs2 <- subset(dfs,PublicRecordsLast12Months>0)
p2 <- ggplot(dfs2,aes_string(x=v2))
k2 <- p2 +geom_bar(aes(color=NewCreditGrade,fill=NewCreditGrade),
alpha=1/2,position="dodge")+xlim(0,5)
grid.arrange(k1,k2,nrow=2)
#Revolving Credit Balance
ggplot(dfs1,aes_string(x=v1))+
geom_density(aes(color=NewCreditGrade,fill=NewCreditGrade),alpha=1/5)+
xlim(0,1e+5)+theme(legend.position = "bottom")
## Final Plots and Summary
library(gridExtra)
library(cowplot)
dfs2 <- subset(dfs,!is.na(CreditScoreRangeLower))
p1 <- ggplot(dfs2,aes(x=NewCreditGrade,y=BorrowerAPR))+
geom_boxplot(aes(fill=LoanCreationYear))
p2 <- ggplot(dfs2, aes(CreditScoreRangeLower,BorrowerAPR)) +
geom_count(alpha=1/10,color="orange") +  ylab("APR")+
geom_line(stat='summary',fun.y=mean,color="red",size=1.0) +xlim(400.0,900.0)+
ylab("APR")
p3 <- plot1b + geom_point() + xlim(400.0,900.0) + geom_smooth() +
geom_errorbar(aes(ymin =apr_mean-(apr_sd/sqrt(n-1)),
ymax = apr_mean+(apr_sd/sqrt(n-1))))+
ylab("APR_Mean")
grid.arrange(p1,p3,p2,nrow=3,top="Final Plot1 : BorrowerAPR vs
CreditGrade/CreditScore")
#Plot 2
temp <- subset(dfs,NewCreditGrade %in% c("A","C","E") & NewLoanStatus
%in% c("Chargedoff","Completed","Delinquent","InGoodStanding"))
p1 <- ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=0.3)+facet_wrap(~NewLoanStatus,ncol=2)+scale_x_log10()
p2 <- ggplot(temp,aes(x=BankcardUtilization,fill=NewCreditGrade))+
geom_histogram(alpha=0.7,binwidth=0.05)+facet_wrap(~NewLoanStatus,ncol=2,
scales="free")+xlim(0.0,1.5)
grid.arrange(p1,p2,nrow=2)
p1 <- ggplot(data=dfsa,aes(x=IncomeLevel,y=BorrowerAPR))+
geom_boxplot(aes(fill=IsBorrowerHomeowner))+ggtitle("BorrowerAPR vs IncomeLevel")
p2 <- ggplot(data=dfsa,aes(x=IncomeLevel,y=MeanCreditScore))+
geom_boxplot(aes(fill=IsBorrowerHomeowner))+ggtitle("MeanCreditScore vs IncomeLevel")
grid.arrange(p1,p2,nrow=2)
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+scale_x_continuous(labels=format(scientific=FALSE))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(labels=format(AvailableBankcardCredit,scientific=FALSE))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(labels = trans_format("log10", math_format(10^.x)))
library(MASS) # to access Animals data sets
library(scales) # to access break formatting functions
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(labels = trans_format("log10", math_format(10^.x)))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(labels = trans_format("log10", math_format(10^x)))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^x)))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+scale_x_log10()+
scale_x_continuous(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=1/5)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
temp$BankcardUtilization = temp$BankcardUtilization*100
ggplot(temp,aes(x=BankcardUtilization,fill=NewCreditGrade))+
geom_density(alpha=1/5)+xlim(0.0,200.0)
#Plot 2
temp <- subset(dfs,NewCreditGrade %in% c("A","C","E") & NewLoanStatus
%in% c("Chargedoff","Completed","Delinquent","InGoodStanding"))
p1 <- ggplot(temp,aes(x=AvailableBankcardCredit,fill=NewCreditGrade))+
geom_density(alpha=0.3)+facet_wrap(~NewLoanStatus,ncol=2)+
scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
labels = trans_format("log10", math_format(10^.x)))
p2 <- ggplot(temp,aes(x=BankcardUtilization,fill=NewCreditGrade))+
geom_histogram(alpha=0.7,binwidth=0.05)+facet_wrap(~NewLoanStatus,ncol=2,
scales="free")+xlim(0.0,1.5)
grid.arrange(p1,p2,nrow=2)
